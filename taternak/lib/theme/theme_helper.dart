import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.onErrorContainer.withOpacity(1),
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(11.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.gray40002,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray30003,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 17.fSize,
          fontFamily: 'Patrick Hand',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 15.fSize,
          fontFamily: 'Patrick Hand',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'Patrick Hand',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 40.fSize,
          fontFamily: 'Patrick Hand',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Patrick Hand',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Patrick Hand',
          fontWeight: FontWeight.w400,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF338309),
    primaryContainer: Color(0XFF231F20),
    secondaryContainer: Color(0XFF787878),

    // Error colors
    errorContainer: Color(0XFFC30707),
    onError: Color(0XFFFF2222),
    onErrorContainer: Color(0X7FFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF060606),
    onPrimaryContainer: Color(0XFFBCBCBC),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA700 => Color(0XFFFAAB01);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFC6EBFC);

  // BlueGray
  Color get blueGray100 => Color(0XFFD3D3D3);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray10002 => Color(0XFFD6D6D6);
  Color get blueGray10003 => Color(0XFFD5CCDB);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFFEB8B8);

  // Gray
  Color get gray100 => Color(0XFFF7F7F7);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray20001 => Color(0XFFE8E8E8);
  Color get gray300 => Color(0XFFE0E0E0);
  Color get gray30001 => Color(0XFFE6E6E6);
  Color get gray30002 => Color(0XFFE5E5E5);
  Color get gray30003 => Color(0XFFDDDDDD);
  Color get gray400 => Color(0XFFBDBDBD);
  Color get gray40001 => Color(0XFFB8B8B8);
  Color get gray40002 => Color(0XFFC0C0C0);
  Color get gray40003 => Color(0XFFC7C7C7);
  Color get gray500 => Color(0XFF9F8B8B);
  Color get gray600 => Color(0XFF706A74);
  Color get gray60001 => Color(0XFF716B75);
  Color get gray60002 => Color(0XFF777777);
  Color get gray700 => Color(0XFF646464);

  // Green
  Color get green300 => Color(0XFF77BF7E);
  Color get green50 => Color(0XFFE4EFE7);
  Color get greenA700 => Color(0XFF19EB15);

  // Indigo
  Color get indigo400 => Color(0XFF578CB2);
  Color get indigoA200 => Color(0XFF6563FF);

  // LightGreen
  Color get lightGreen100 => Color(0XFFE1DDBC);

  // Lime
  Color get lime100 => Color(0XFFEFE9BB);
  Color get lime400 => Color(0XFFC9D46C);

  // Pink
  Color get pink100 => Color(0XFFEEC6C6);

  // Red
  Color get red100 => Color(0XFFF6D2D2);
  Color get red10001 => Color(0XFFFADCD4);
  Color get red10002 => Color(0XFFF7DDD3);
  Color get red500 => Color(0XFFFF3B3B);
  Color get red900 => Color(0XFFC31212);
  Color get redA700 => Color(0XFFFE0303);
  Color get redA70001 => Color(0XFFFF0000);

  // Teal
  Color get teal200 => Color(0XFF77BFB2);
  Color get teal50 => Color(0XFFE3F1F6);

  // Yellow
  Color get yellow300 => Color(0XFFF1E470);
  Color get yellow900 => Color(0XFFE48716);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
